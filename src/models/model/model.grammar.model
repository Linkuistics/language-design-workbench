model model {

    Model = { name: Id, parent_name: option<Id>, Deletion: seq<Deletion>, MemberModification: seq<MemberModification>, Definition: seq<Definition> };
    
    Definition = { name: Id, Type: Type };
    
    Deletion = { name: Id };
    
    MemberModification = { name: Id, MemberDeletion: seq<MemberDeletion>, MemberAddition: seq<MemberAddition> };
    
    MemberDeletion = { name: Id };
    
    MemberAddition = { ProductMember: ProductMember, Type: Type };
    
    Type = { VoidType: VoidType, PrimitiveType: PrimitiveType, EnumType: EnumType, TypeWithStructure: TypeWithStructure, NamedTypeReference: NamedTypeReference };
    
    VoidType = {  };
    
    PrimitiveType = { "boolean" | "char" | "string" | "i8" | "i16" | "i32" | "i64" | "u8" | "u16" | "u32" | "u64" | "f32" | "f64" };
    
    EnumType = { member: String, member: seq<String> };
    
    String = { Id: Id };
    
    TypeWithStructure = { SumType: SumType, ProductType: ProductType, GenericType: GenericType };
    
    SumType = { member: Type, member: seq<Type> };
    
    ProductType = { member: option<ProductMember>, member: seq<ProductMember> };
    
    ProductMember = { name: Id, Type: Type };
    
    GenericType = { TupleType: TupleType, MapType: MapType, SetType: SetType, SequenceType: SequenceType, OptionType: OptionType };
    
    TupleType = { member: Type, member: seq<Type> };
    
    MapType = { key_type: Type, value_type: Type };
    
    SetType = { key_type: Type };
    
    SequenceType = { elementType: Type };
    
    OptionType = { Type: Type };
    
    NamedTypeReference = { name: Id, name: seq<Id> };
    
    Id = { Identifier: Identifier };
    
    Identifier = { value: string };
    
    InitialIdentifierChar = { value: string };
    
    IdentifierChar = { value: string };
    
    Trivia = { LineComment: LineComment, BlockComment: BlockComment, Whitespace: Whitespace };
    
    Whitespace = { value: string };
    
    LineComment = { value: string };
    
    BlockComment = { value: string };
    
}
