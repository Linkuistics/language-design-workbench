grammar model {
    
    Model =
        'model' name:Id 
        ( 'modifies' parent_name:Id )? 
        '{' ( value:( Deletion | MemberModification | Definition ) ';' )* '}'
        ;

    Definition = name:Id '=' Type  ;

    Deletion           = 'delete' name:Id  ;
    MemberModification = 'modify' name:Id value:( MemberDeletion | MemberAddition )+ ;
    MemberDeletion     = '-=' name:Id ; 
    MemberAddition     = '+=' value:( ProductMember | Type ) ;


    /************************************
     * Types
     ************************************/

    Type = VoidType | PrimitiveType | EnumType | TypeWithStructure | NamedTypeReference ;

    VoidType = '()' ;

    PrimitiveType = 'boolean' | 'char' | 'string' | 'i8' | 'i16' | 'i32' | 'i64' | 'u8' | 'u16' | 'u32' | 'u64' | 'f32' | 'f64' ;

    EnumType       = '{' member:String ( '|' member:String )* '}' ;
    String @noskip = '"' Id '"' ;

    TypeWithStructure = SumType | ProductType | GenericType ;
    
    SumType = '{' member:Type ( '|' member:Type )+ '}' ;

    ProductType   = '{' ( member:ProductMember ( ',' member:ProductMember )* )? '}' ;
    ProductMember = name:Id ':' Type ;

    GenericType = TupleType | MapType | SetType | SequenceType | OptionType ;

    TupleType    = 'tuple<' member:Type ( ',' member:Type )* '>' ;
    MapType      = 'map<' key_type:Type ',' value_type:Type '>' ;
    SetType      = 'set<' key_type:Type '>' ;
    SequenceType = 'seq<' elementType:Type '>' ;
    OptionType   = 'option<' Type '>' ;

    NamedTypeReference @noskip = name:Id ( '::' name:Id )* ;


    /************************************
     * Identifiers
     ************************************/
    
    Id = Identifier ;

    Identifier            @atomic = InitialIdentifierChar ( IdentifierChar )* ;
    InitialIdentifierChar @atomic = [a-zA-Z_] ;
    IdentifierChar        @atomic = [a-zA-Z_0-9] ;


    /************************************
     * Trivia
     ************************************/

    Trivia        @noskip = LineComment | BlockComment | Whitespace ;
    Whitespace    @atomic = [\n\t ]+ ;
    LineComment   @atomic = '//' [^\n]* '\n'? ;
    BlockComment  @atomic = '/*' ( [^*]+ | '*' !'/' )* '/' ;

}