model grammar {

    Grammar = { name: Name, rule: seq<Rule>, rule: seq<PrattRule>, rule: seq<IdentifierRule> };
    
    Rule = { name: Name, annotation: option<RuleAnnotation>, versionAnnotation: seq<VersionAnnotation>, body: RuleBody };
    
    RuleAnnotation = {  };
    
    PrattRule = { name: Name, versionAnnotation: seq<VersionAnnotation>, operator: seq<PrattOperator>, primary: PrattPrimary };
    
    PrattOperator = { prattOperatorType: PrattOperatorType, name: Name, versionAnnotation: seq<VersionAnnotation>, body: RuleBody };
    
    PrattPrimary = { name: Name, body: RuleBody };
    
    PrattOperatorType = {  };
    
    IdentifierRule = { name: Name, ruleAnnotation: option<RuleAnnotation>, versionAnnotation: seq<VersionAnnotation>, body: RuleBody, excluding: RuleBody, body: RuleBody };
    
    VersionAnnotation = { versionAnnotationType: VersionAnnotationType, versionNumber: VersionNumber };
    
    VersionAnnotationType = {  };
    
    VersionNumber = { segment: VersionSegment, segment: seq<VersionSegment> };
    
    VersionSegment = {  };
    
    RuleBody = { sequenceRule: SequenceRule, alternativeRules: AlternativeRules };
    
    SequenceRule = { ruleElement: seq<RuleElement> };
    
    AlternativeRules = { alternative: seq<Alternative> };
    
    Alternative = { label: option<Label>, versionAnnotation: seq<VersionAnnotation>, sequenceRule: SequenceRule };
    
    RuleElement = { countedRuleElement: CountedRuleElement, negativeLookahead: NegativeLookahead };
    
    CountedRuleElement = { label: option<Label>, countableRuleElement: CountableRuleElement, count: option<Count>, versionAnnotation: seq<VersionAnnotation> };
    
    CountableRuleElement = { ruleReference: RuleReference, string: String, charSet: CharSet, any: Any, ruleBody: RuleBody };
    
    RuleReference = { name: Name, name: seq<Name> };
    
    Count = {  };
    
    Label = { name: Name };
    
    String = {  };
    
    CharSet = { startChar: seq<CharSetChar>, endChar: seq<CharSetChar> };
    
    CharSetChar = {  };
    
    Any = {  };
    
    NegativeLookahead = { charSet: CharSet, string: String };
    
    Trivia = { lineComment: LineComment, blockComment: BlockComment, whitespace: Whitespace };
    
    LineComment = {  };
    
    BlockComment = {  };
    
    Whitespace = {  };
    
}
