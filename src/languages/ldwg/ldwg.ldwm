type OptionType<T> = T | undefined;
type ResultType<O, E> = O | { error: E }


export class Grammar {
    constructor(
        public name:Name
    ) {}
}

export class Rule {
    constructor(
        public name:Name,
        public annotation:Option<RuleAnnotation>,
        public versionAnnotation:Array<VersionAnnotation>,
        public body:RuleBody
    ) {}
}

export class RuleAnnotation {
}

export class PrattRule {
    constructor(
        public name:Name,
        public versionAnnotation:Array<VersionAnnotation>,
        public operator:Array<PrattOperator>,
        public primary:PrattPrimary
    ) {}
}

export class PrattOperator {
    constructor(
        public prattOperatorType:PrattOperatorType,
        public name:Name,
        public versionAnnotation:Array<VersionAnnotation>,
        public body:RuleBody
    ) {}
}

export class PrattPrimary {
    constructor(
        public name:Name,
        public body:RuleBody
    ) {}
}

export class PrattOperatorType {
}

export class IdentifierRule {
    constructor(
        public name:Name,
        public ruleAnnotation:Option<RuleAnnotation>,
        public versionAnnotation:Array<VersionAnnotation>
    ) {}
}

export class VersionAnnotation {
    constructor(
        public versionAnnotationType:VersionAnnotationType,
        public versionNumber:VersionNumber
    ) {}
}

export class VersionAnnotationType {
}

export class VersionNumber {
    constructor(
        public segment:VersionSegment,
        public segment:Array<VersionSegment>
    ) {}
}

export class VersionSegment {
}

export class RuleBody {
}

export class SequenceRule {
    constructor(
        public ruleElement:Array<RuleElement>
    ) {}
}

export class AlternativeRules {
    constructor(
        public alternative:Array<Alternative>
    ) {}
}

export class Alternative {
    constructor(
        public label:Option<Label>,
        public versionAnnotation:Array<VersionAnnotation>,
        public sequenceRule:SequenceRule
    ) {}
}

export class RuleElement {
}

export class CountedRuleElement {
    constructor(
        public label:Option<Label>,
        public countableRuleElement:CountableRuleElement,
        public count:Option<Count>,
        public versionAnnotation:Array<VersionAnnotation>
    ) {}
}

export class CountableRuleElement {
}

export class RuleReference {
    constructor(
        public name:Name,
        public name:Array<Name>
    ) {}
}

export class Count {
}

export class Label {
    constructor(
        public name:Name
    ) {}
}

export class String {
}

export class CharSet {
    constructor(
        public startChar:Array<CharSetChar>,
        public endChar:Array<CharSetChar>
    ) {}
}

export class CharSetChar {
}

export class Any {
}

export class NegativeLookahead {
}

export class Trivia {
}

export class LineComment {
}

export class BlockComment {
}

export class Whitespace {
}