type OptionType<T> = T | undefined;
type ResultType<O, E> = O | { error: E }


export class Model {
    constructor(
        public name:Id,
        public parentName:Option<Id>
    ) {}
}

export class Definition {
    constructor(
        public name:Id,
        public type:Type
    ) {}
}

export class Deletion {
    constructor(
        public name:Id
    ) {}
}

export class MemberModification {
    constructor(
        public name:Id
    ) {}
}

export class MemberDeletion {
    constructor(
        public namedTypeReference:NamedTypeReference
    ) {}
}

export class MemberAddition {
}

export class Type {
}

export class VoidType {
}

export class PrimitiveType {
}

export class EnumType {
    constructor(
        public member:String,
        public member:Array<String>
    ) {}
}

export class String {
    constructor(
        public id:Id
    ) {}
}

export class TypeWithStructure {
}

export class SumType {
    constructor(
        public member:Type,
        public member:Array<Type>
    ) {}
}

export class ProductType {
    constructor(
        public member:Option<ProductMember>,
        public member:Array<ProductMember>
    ) {}
}

export class ProductMember {
    constructor(
        public name:Id,
        public type:Type
    ) {}
}

export class GenericType {
}

export class TupleType {
    constructor(
        public member:Type,
        public member:Array<Type>
    ) {}
}

export class MapType {
    constructor(
        public keyType:Type,
        public valueType:Type
    ) {}
}

export class SetType {
    constructor(
        public keyType:Type
    ) {}
}

export class SequenceType {
    constructor(
        public type:Type
    ) {}
}

export class OptionType {
    constructor(
        public type:Type
    ) {}
}

export class ResultType {
    constructor(
        public okType:Type,
        public errType:Type
    ) {}
}

export class NamedTypeReference {
    constructor(
        public name:Id,
        public name:Array<Id>
    ) {}
}

export class InitialIdentifierChar {
}

export class IdentifierChar {
}

export class Trivia {
}

export class Whitespace {
}

export class LineComment {
}

export class BlockComment {
}