model model {

    Model = { name: Id, parentName: option<Id>, deletion: seq<Deletion>, memberModification: seq<MemberModification>, definition: seq<Definition> };
    
    Definition = { name: Id, type: Type };
    
    Deletion = { name: Id };
    
    MemberModification = { name: Id, memberDeletion: seq<MemberDeletion>, memberAddition: seq<MemberAddition> };
    
    MemberDeletion = { name: Id };
    
    MemberAddition = { productMember: ProductMember, type: Type };
    
    Type = { voidType: VoidType, primitiveType: PrimitiveType, enumType: EnumType, typeWithStructure: TypeWithStructure, namedTypeReference: NamedTypeReference };
    
    VoidType = {  };
    
    PrimitiveType = {  };
    
    EnumType = { member: String, member: seq<String> };
    
    String = { id: Id };
    
    TypeWithStructure = { sumType: SumType, productType: ProductType, genericType: GenericType };
    
    SumType = { member: Type, member: seq<Type> };
    
    ProductType = { member: option<ProductMember>, member: seq<ProductMember> };
    
    ProductMember = { name: Id, type: Type };
    
    GenericType = { tupleType: TupleType, mapType: MapType, setType: SetType, optionType: OptionType, resultType: ResultType };
    
    TupleType = { member: Type, member: seq<Type> };
    
    MapType = { keyType: Type, valueType: Type };
    
    SetType = { keyType: Type };
    
    SequenceType = { type: Type };
    
    OptionType = { type: Type };
    
    ResultType = { okType: Type, errType: Type };
    
    NamedTypeReference = { name: Id, name: seq<Id> };
    
    InitialIdentifierChar = {  };
    
    IdentifierChar = {  };
    
    Trivia = { lineComment: LineComment, blockComment: BlockComment, whitespace: Whitespace };
    
    Whitespace = {  };
    
    LineComment = {  };
    
    BlockComment = {  };
    
}
