type OptionType<T> = T | undefined;
type ResultType<O, E> = O | { error: E }


export class Datum {
}

export class Boolean {
}

export class Number {
}

export class Num2 {
    constructor(
        public sign:Option<Sign>,
        public ureal2:Ureal2
    ) {}
}

export class Ureal2 {
    constructor(
        public uinteger2:Uinteger2
    ) {}
}

export class Uinteger2 {
    constructor(
        public digit2:Array<Digit2>
    ) {}
}

export class Digit2 {
}

export class Num10 {
    constructor(
        public sign:Option<Sign>,
        public ureal10:Ureal10
    ) {}
}

export class Ureal10 {
    constructor(
        public uinteger10:Uinteger10
    ) {}
}

export class Uinteger10 {
    constructor(
        public digit10:Array<Digit10>
    ) {}
}

export class Digit10 {
}

export class Num16 {
    constructor(
        public sign:Option<Sign>,
        public ureal16:Ureal16
    ) {}
}

export class Ureal16 {
    constructor(
        public uinteger16:Uinteger16
    ) {}
}

export class Uinteger16 {
    constructor(
        public digit16:Array<Digit16>
    ) {}
}

export class Digit16 {
}

export class Sign {
}

export class Character {
}

export class CharacterName {
}

export class String {
    constructor(
        public stringCharacter:Array<StringCharacter>
    ) {}
}

export class StringCharacter {
}

export class Symbol {
    constructor(
        public ident:Ident
    ) {}
}

export class List {
}

export class Abbreviation {
}

export class Vector {
}

export class ByteVector {
}

export class Struct {
}

export class IdentStart {
}

export class IdentContinue {
}

export class Trivia {
}

export class Comment {
}

export class LineComment {
}

export class BlockComment {
}

export class DatumComment {
    constructor(
        public datum:Datum
    ) {}
}

export class Whitespace {
}