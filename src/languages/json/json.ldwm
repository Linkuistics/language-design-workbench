type OptionType<T> = T | undefined;
type ResultType<O, E> = O | { error: E }


export class Value {
}

export class Boolean {
}

export class Number {
    constructor(
        public sign:Option<Sign>,
        public ureal:Ureal
    ) {}
}

export class Ureal {
    constructor(
        public uinteger:Uinteger
    ) {}
}

export class Uinteger {
    constructor(
        public digit:Array<Digit>
    ) {}
}

export class Digit {
}

export class Sign {
}

export class String {
    constructor(
        public stringCharacter:Array<StringCharacter>
    ) {}
}

export class StringCharacter {
}

export class Null {
}

export class List {
    constructor(
        public value:Option<Value>,
        public value:Array<Value>
    ) {}
}

export class Map {
    constructor(
        public mapEntry:Option<MapEntry>,
        public mapEntry:Array<MapEntry>
    ) {}
}

export class MapEntry {
    constructor(
        public key:String,
        public value:Value
    ) {}
}

export class Trivia {
}

export class Comment {
}

export class LineComment {
}

export class BlockComment {
}

export class Whitespace {
}